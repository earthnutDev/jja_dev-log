name: 发布到 npm
on:
  push:
    branches: '*'
    paths:
      - 'packages/core/**' # 主包
      - 'packages/dev-log/**' # 日志包
      - 'packages/check-version/**' # 版本检测包

  workflow_dispatch: # 手动触发
    inputs:
      version:
        description: '触发原因（选填）'
        required: false
        default: '手动触发'
        type: string
      ref:
        description: '发布的分支（选填）'
        required: false
        default: ''
        type: string
      package:
        description: '要发布的包'
        required: true
        type: choice
        options:
          - core
          - dev-log
          - check-version
          - all

jobs:
  pub:
    # 在提交的代码包含 `version` 字样时才运行该动作
    # 或者手动触发
    name: |
      发布到 npm
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    # 复合条件判断（自动触发检查提交信息，手动触发直接放行）
    # startsWith(github.event.head_commit.message, 'version')
    # contains(github.event.inputs.version, '手动触发')
    # endsWith(github.event.head_commit.message, 'version')
    if: |
      (github.event_name == 'push' && startsWith(github.event.head_commit.message, 'version')) ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: 代码检出
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref_name }}
          fetch-depth: 3

      - name: 初始化 Node 并设定 Node 版本
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: https://registry.npmjs.org

      - name: 安装 dependencies 依赖
        run: |
          npm ci

      - name: 打包 check version
        run: |
          cd packages/check-version
          npm ci
          npm run build

      - name: 检测变更的包信息
        id: changed_packages
        run: |
          check_version() {
           local NAME=$1
           local CHANGED=$(git diff --name-only HEAD^ HEAD | grep -q "^packages/${NAME}/" && node ./packages/check-version/dist/bin.mjs name=$NAME  && echo 'true' || echo 'false' | tr -d '\n')   
           echo "初始化检测 CHANGED  $CHANGED"
           echo "调试信息:"
           echo "${NAME}=|${CHANGED}|"
           echo "事件类型: ${{ github.event_name }}"

           if  [ "$CHANGED" != "false" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
             echo '手动触发判断'   
             if [ "${{ github.event.inputs.package }}" = "all" ] || [ "${{ github.event.inputs.package }}" = "${NAME}" ]; then
               return 0
             else
               return 1
             fi
           fi

           if [ "$CHANGED" != "false" ]; then
             return 0
           else 
             return 1
           fi
          }

          if ! check_version core; then
             echo "core_changed=false" >> $GITHUB_OUTPUT
          else 
             echo "core_changed=true" >> $GITHUB_OUTPUT
          fi
          if ! check_version check-version; then
             echo "check_version_changed=false" >> $GITHUB_OUTPUT
          else 
             echo "check_version_changed=true" >> $GITHUB_OUTPUT
          fi
          if ! check_version dev-log; then
             echo "dev_log_changed=false" >> $GITHUB_OUTPUT
          else 
             echo "dev_log_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: 构建  core code
        if: steps.changed_packages.outputs.core_changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          cd packages/core
          npm ci
          npm run build
          VERSION=$(node -p "require('./package.json').version")
          echo "获取全称 npm version : $VERSION"
          if [[ $VERSION =~ -([a-zA-Z0-9]+)(\.|$) ]]; then
            TAG=${BASH_REMATCH[1]}
            echo "捕获到 npm tag : $TAG"
          else
            TAG="latest"
            echo "未捕获到 npm tag 设置了默认 : $TAG"
          fi
          cd dist
          npm publish --provenance --access public --tag ${TAG}

      - name: 构建 dev log
        if: steps.changed_packages.outputs.dev_log_changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          cd packages/dev-log
          npm ci
          npm run build
          VERSION=$(node -p "require('./package.json').version")
          echo "获取全称 npm version : $VERSION"
          if [[ $VERSION =~ -([a-zA-Z0-9]+)(\.|$) ]]; then
            TAG=${BASH_REMATCH[1]}
            echo "捕获到 npm tag : $TAG"
          else
            TAG="latest"
            echo "未捕获到 npm tag 设置了默认 : $TAG"
          fi
          cd dist
          npm publish --provenance --access public --tag ${TAG}

      - name: 构建 check version
        if: steps.changed_packages.outputs.check_version_changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          cd packages/check-version
          npm run build
          VERSION=$(node -p "require('./package.json').version")
          echo "获取全称 npm version : $VERSION"
          if [[ $VERSION =~ -([a-zA-Z0-9]+)(\.|$) ]]; then
            TAG=${BASH_REMATCH[1]}
            echo "捕获到 npm tag : $TAG"
          else
            TAG="latest"
            echo "未捕获到 npm tag 设置了默认 : $TAG"
          fi
          cd dist
          npm publish --provenance --access public --tag ${TAG}
