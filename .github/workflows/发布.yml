name: 发布到 npm
on:
  push:
    branches: '*'
    paths:
      - 'packages/core/**' # 主包
      - 'packages/dev-log/**' # 日志包
      - 'packages/check-version/**' # 版本检测包
      - 'packages/copy-text/**' # 复制文本到剪切板的包
      - 'packages/rollup-external/**' # 用于 rollup 打包排除依赖的函数
      - 'package.json' # 全局的依赖信息

  workflow_dispatch: # 手动触发
    inputs:
      ref:
        description: '发布的分支（选填）'
        required: false
        default: ''
        type: string
      package:
        description: '要发布的包'
        required: true
        type: choice
        options:
          - all
          - core
          - dev-log
          - check-version
          - copy-text
          - rollup-external
        default: 'all'

jobs:
  pub:
    # 在提交的代码包含 `version` 字样时才运行该动作
    # 或者手动触发
    name: |
      发布到 npm
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    # 复合条件判断（自动触发检查提交信息，手动触发直接放行）
    # startsWith(github.event.head_commit.message, 'version')
    # contains(github.event.inputs.version, '手动触发')
    # endsWith(github.event.head_commit.message, 'version')
    if: |
      (github.event_name == 'push' && startsWith(github.event.head_commit.message, 'version')) ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: 代码检出
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref_name }}
          fetch-depth: 3

      - name: 初始化 Node 并设定 Node 版本
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: https://registry.npmjs.org

      - name: 安装 dependencies 依赖
        run: npm ci

      - name: 检测变更的包信息
        id: changed_packages
        run: |
          check_version() {
           local input="$1"
           local NAME=$(echo "${input// /-}" | tr -s '-') # 替换空格为 - 并删除重复的字符
           local ECHO_NAME=$(echo "${input// /_}" | tr -s '_') # 将空格替换为 _
           echo "输入：${input}"
           echo "使用：${NAME}"
           echo "输出：${ECHO_NAME}"
           local CHANGED=$(git diff --name-only HEAD^ HEAD | grep -q "^packages/${NAME}/" && 
           echo 'true' || echo 'false' | tr -d '\n')
           echo "校验 ${NAME} 是否有更改：${CHANGED}"
           if [ "$CHANGED" = "false"  ]; then
             echo "${ECHO_NAME}_changed=false" >> $GITHUB_OUTPUT
             return 0
           fi
           if npx @qqi/check-version name=$NAME; then
             echo "校验通过 ${NAME}"
             CHANGED="true"
           else
             echo "校验未通过 ${NAME}"
             echo "${ECHO_NAME}_changed=false" >> $GITHUB_OUTPUT
             return 0
           fi
           if  [ "$CHANGED" != "false" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
             echo '手动触发判断'   
             if [ "${{ github.event.inputs.package }}" = "all" ] || [ "${{ github.event.inputs.package }}" = "${NAME}" ]; then
                echo "手动触发发布且包含 ${NAME}"
                echo "${ECHO_NAME}_changed=true" >> $GITHUB_OUTPUT
                return 0
              else
                echo "手动触发发布但不包含 ${NAME}"
                echo "${ECHO_NAME}_changed=false" >> $GITHUB_OUTPUT
                return 0
              fi
            fi
                
            if [ "$CHANGED" != "false" ]; then
              echo "检验通过 ${NAME}"
              echo "${ECHO_NAME}_changed=true" >> $GITHUB_OUTPUT
            else 
              echo "检验未通过 ${NAME}"
              echo "${ECHO_NAME}_changed=false" >> $GITHUB_OUTPUT
           fi
          }

          args=("core" "dev log" "check version" "copy text" "rollup external")
          for arg in "${args[@]}"; do
            check_version "$arg"
          done

      - name: 检测设定的值
        run: |
          echo "${{ steps.changed_packages.outputs.core_changed }}"
          echo "${{ steps.changed_packages.outputs.dev_log_changed }}"
          echo "${{ steps.changed_packages.outputs.check_version_changed }}"
          echo "${{ steps.changed_packages.outputs.copy_text_changed }}"
          echo "${{ steps.changed_packages.outputs.rollup_external_changed }}"
          chmod +x ./scripts/pub.sh

      - name: 构建  core code
        if: steps.changed_packages.outputs.core_changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          ./scripts/pub.sh core

      - name: 构建 dev log
        if: steps.changed_packages.outputs.dev-log_changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          ./scripts/pub.sh dev-log

      - name: 构建 check version
        if: steps.changed_packages.outputs.check_version_changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          ./scripts/pub.sh check-version

      - name: 构建 copy text
        if: steps.changed_packages.outputs.copy_text_changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          ./scripts/pub.sh copy-text

      - name: 构建 rollup external
        if: steps.changed_packages.outputs.rollup_external_changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          ./scripts/pub.sh rollup-external
