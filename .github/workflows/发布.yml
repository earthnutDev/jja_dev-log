name: 发布到 npm
on:
  push:
    branches: '*'
    paths:
      - 'packages/core/**' # 主包
      - 'packages/dev-log/**' # 日志包
      - 'packages/check-version/**' # 版本检测包

  workflow_dispatch: # 手动触发
    inputs:
      version:
        description: '触发原因（选填）'
        required: false
        default: '手动触发'
        type: string
      ref:
        description: '发布的分支（选填）'
        required: false
        default: ''
        type: string
      package:
        description: '要发布的包'
        required: true
        type: choice
        options:
          - core
          - dev-log
          - check-version
          - all

jobs:
  pub:
    # 在提交的代码包含 `version` 字样时才运行该动作
    # 或者手动触发
    name: |
      发布到 npm
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    # 复合条件判断（自动触发检查提交信息，手动触发直接放行）
    # startsWith(github.event.head_commit.message, 'version')
    # contains(github.event.inputs.version, '手动触发')
    # endsWith(github.event.head_commit.message, 'version')
    if: |
      (github.event_name == 'push' && startsWith(github.event.head_commit.message, 'version')) ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: 代码检出
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref_name }}
          fetch-depth: 3

      - name: 初始化 Node 并设定 Node 版本
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: https://registry.npmjs.org

      - name: 安装 dependencies 依赖
        run: |
          npm ci

      - name: 打包 check version
        run: |
          cd packages/check-version
          npm ci
          npm run build

      - name: 检测变更的包信息
        id: changed_packages
        run: |
          CHANGED_CORE=$(git diff --name-only HEAD^ HEAD | grep -q '^packages/core/' && node ./packages/check-version/dist/bin.mjs name=core  && echo "true" || echo "false" | tr -d '\n')
          echo "初始化检测 CHANGED_CORE  $CHANGED_CORE"
          echo "调试信息:"
          echo "CHANGED_CHECK_VERSION=|${CHANGED_CHECK_VERSION}|"
          echo "事件类型: ${{ github.event_name }}"
          if  [ "$CHANGED_CORE" = "true" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo '手动触发判断'   
            if [ "${{ github.event.inputs.package }}" = "all" ] || [ "${{ github.event.inputs.package }}" = "core" ]; then
              CHANGED_CORE="true"
            else
              CHANGED_CORE="false"
            fi
          fi

          CHANGED_DEV_LOG=$(git diff --name-only HEAD^ HEAD | grep -q '^packages/dev-log/' && node ./packages/check-version/dist/bin.mjs name=dev-log && echo "true" || echo "false" | tr -d '\n')
          echo "初始化检测 CHANGED_DEV_LOG $CHANGED_DEV_LOG"
          echo "调试信息:"
          echo "CHANGED_CHECK_VERSION=|${CHANGED_CHECK_VERSION}|"
          echo "事件类型: ${{ github.event_name }}"
          if  [ "$CHANGED_DEV_LOG" = "true" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo '手动触发判断'   
            if [ "${{ github.event.inputs.package }}" = "all" ] || [ "${{ github.event.inputs.package }}" = "dev-log" ]; then
              CHANGED_DEV_LOG="true"
            else
              CHANGED_DEV_LOG="false"
            fi
          fi

          CHANGED_CHECK_VERSION=$(git diff --name-only HEAD^ HEAD | grep -q '^packages/check-version/' && node ./packages/check-version/dist/bin.mjs name=check-version && echo "true" || echo "false" | tr -d '\n')
          echo "初始化检测 CHANGED_CHECK_VERSION $CHANGED_CHECK_VERSION"
          echo "调试信息:"
          echo "CHANGED_CHECK_VERSION=|${CHANGED_CHECK_VERSION}|"
          echo "事件类型: ${{ github.event_name }}"
          if  [ "$CHANGED_CHECK_VERSION" = "true" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo '手动触发判断'   
              if [ "${{ github.event.inputs.package }}" = "all" ] || [ "${{ github.event.inputs.package }}" = "check-version" ]; then
              CHANGED_CHECK_VERSION="true"
              else
              CHANGED_CHECK_VERSION="false"
              fi
          fi
          echo "core_changed=${CHANGED_CORE}" >> $GITHUB_OUTPUT
          echo "dev_log_changed=${CHANGED_DEV_LOG}" >> $GITHUB_OUTPUT
          echo "check_version_changed=${CHANGED_CHECK_VERSION}" >> $GITHUB_OUTPUT
          echo "CHANGED_CORE: ${CHANGED_CORE}"
          echo "CHANGED_DEV_LOG: ${CHANGED_DEV_LOG}"
          echo "CHANGED_CHECK_VERSION: ${CHANGED_CHECK_VERSION}"
          exit 1;

      - name: 构建
        if: steps.changed_packages.outputs.core_changed == 'true'
        run: |
          npm run build

      - name: 获取版本号并解析 tag
        id: extract-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "获取全称 npm version : $VERSION"

          if [[ $VERSION =~ -([a-zA-Z0-9]+)(\.|$) ]]; then
            TAG=${BASH_REMATCH[1]}
            echo "捕获到 npm tag : $TAG"
          else
            TAG="latest"
            echo "未捕获到 npm tag 设置了默认 : $TAG"
          fi

          echo "tag=${TAG}" >> $GITHUB_ENV # 输出 tag

      - name: 发布到 npm
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          cd dist
          npm publish --provenance --access public --tag ${{ env.tag }}
